/* global bootstrap */
document.addEventListener("DOMContentLoaded", function () {
    // Cache c√°c input/element c·∫ßn d√πng trong form ƒëƒÉng k√Ω
    const btnSubmit = document.querySelector("#form-register .button-three");
    const inputFull = document.getElementById("register-fullname");
    const inputEmail = document.getElementById("register-email");
    const inputPass = document.getElementById("register-password");
    const inputConf = document.getElementById("register-password-confirmation");
    const inputOtp = document.getElementById("register-otp");
    const timerLabel = document.getElementById("otp-timer");

    // T·ª± l·∫•y modal elements (kh√¥ng ph·ª• thu·ªôc file kh√°c)
    const registerModalEl = document.getElementById("registerModal");
    const loginModalEl = document.getElementById("loginModal");

    // T√¨m ph·∫ßn t·ª≠ hi·ªÉn th·ªã message (theo convention .form-group > .form-message)
    function getMessageElementOf(inputElement) {
        if (!inputElement) return null;
        const formGroup =
            inputElement.closest(".form-group") || inputElement.parentElement;
        return formGroup ? formGroup.querySelector(".form-message") : null;
    }

    // Hi·ªÉn th·ªã message cho 1 input v√† ƒë·ªïi m√†u theo tr·∫°ng th√°i
    function showMessageForInput(inputElement, message, status = "") {
        const messageElement = getMessageElementOf(inputElement);
        if (!messageElement) return;
        messageElement.textContent = message || "";
        messageElement.style.color =
            status === "success" ? "green" : status === "failure" ? "red" : "";
    }

    // Xo√° to√†n b·ªô message l·ªói/th√†nh c√¥ng tr√™n c√°c tr∆∞·ªùng c∆° b·∫£n
    function clearAllMessages() {
        [inputFull, inputEmail, inputPass, inputConf].forEach((input) =>
            showMessageForInput(input, "", "")
        );
    }

    // Helper: trim an to√†n v·ªõi null/undefined
    function trim(v) {
        return (v || "").trim();
    }

    // Ki·ªÉm tra OTP ƒë√£ ƒë∆∞·ª£c verify th√†nh c√¥ng hay ch∆∞a (d·ª±a tr√™n message do script verify ƒë·∫∑t)
    function isOtpValid() {
        const msgEl = getMessageElementOf(inputOtp);
        return msgEl && msgEl.textContent.trim() === "M√£ OTP ch√≠nh x√°c ‚úÖ";
    }

    // Enable/disable n√∫t ƒêƒÉng k√Ω theo tr·∫°ng th√°i OTP
    function updateRegisterButton() {
        if (isOtpValid()) {
            btnSubmit.disabled = false;
            btnSubmit.style.opacity = "1";
            btnSubmit.style.cursor = "";
        } else {
            btnSubmit.disabled = true;
            btnSubmit.style.opacity = "0.5";
            btnSubmit.style.cursor = "not-allowed";
        }
    }

    // Theo d√µi thay ƒë·ªïi message c·ªßa OTP ƒë·ªÉ t·ª± c·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t ƒêƒÉng k√Ω
    (function observeOtpMessage() {
        const otpMsgEl = getMessageElementOf(inputOtp);
        if (!otpMsgEl) return;
        const observer = new MutationObserver(updateRegisterButton);
        observer.observe(otpMsgEl, {
            childList: true,
            subtree: true,
            characterData: true,
        });
    })();

    // Khi ng∆∞·ªùi d√πng g√µ v√†o c√°c tr∆∞·ªùng ‚Üí xo√° message c≈© ƒë·ªÉ tr√°nh g√¢y nhi·ªÖu
    [inputFull, inputEmail, inputPass, inputConf, inputOtp].forEach((i) => {
        i && i.addEventListener("input", () => showMessageForInput(i, "", ""));
    });

    // Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa n√∫t ƒêƒÉng k√Ω (th∆∞·ªùng l√† disabled)
    updateRegisterButton();

    // √Ånh x·∫° th√¥ng b√°o l·ªói t·ª´ server v·ªÅ ƒë√∫ng √¥ input li√™n quan (d·ª±a v√†o t·ª´ kho√° ti·∫øng Vi·ªát)
    function routeServerErrorToField(message, extras = {}) {
        const msg = (message || "").toLowerCase();

        // N·∫øu server b√°o OTP h·∫øt h·∫°n ‚Üí ƒë∆∞a l·ªói v·ªÅ tr∆∞·ªùng OTP v√† c·∫≠p nh·∫≠t n√∫t
        if (extras.otpExpired) {
            showMessageForInput(inputOtp, message, "failure");
            updateRegisterButton();
            return;
        }

        if (msg.includes("h·ªç") || msg.includes("t√™n")) {
            showMessageForInput(inputFull, message, "failure");
        } else if (msg.includes("email")) {
            showMessageForInput(inputEmail, message, "failure");
        } else if (msg.includes("x√°c nh·∫≠n m·∫≠t kh·∫©u")) {
            showMessageForInput(inputConf, message, "failure");
        } else if (msg.includes("m·∫≠t kh·∫©u")) {
            showMessageForInput(inputPass, message, "failure");
        } else if (msg.includes("otp")) {
            showMessageForInput(inputOtp, message, "failure");
        } else {
            // M·∫∑c ƒë·ªãnh ƒë·∫©y ra khu v·ª±c OTP (khu v·ª±c th√¥ng b√°o chung)
            showMessageForInput(inputOtp, message, "failure");
        }
    }

    // ƒê∆∞a UI form ƒëƒÉng k√Ω v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh (d√πng khi m·ªü l·∫°i/ƒë√≥ng xong)
    function resetRegisterUI() {
        clearAllMessages();

        if (inputFull) inputFull.value = "";
        if (inputEmail) inputEmail.value = "";
        if (inputPass) inputPass.value = "";
        if (inputConf) inputConf.value = "";
        if (inputOtp) inputOtp.value = "";

        if (timerLabel) timerLabel.textContent = "";

        if (btnSubmit) {
            btnSubmit.disabled = true;
            btnSubmit.classList.remove("btn-success");
            btnSubmit.style.opacity = "0.5";
            btnSubmit.style.cursor = "not-allowed";
            btnSubmit.innerHTML = "ƒêƒÉng k√Ω";
        }

        const otpMsgEl = getMessageElementOf(inputOtp);
        if (otpMsgEl) {
            otpMsgEl.style.color = "";
            otpMsgEl.textContent = "";
            if (otpMsgEl.dataset) delete otpMsgEl.dataset.state;
        }

        updateRegisterButton();
    }

    // Reset khi modal register m·ªü/ƒë√≥ng ƒë·ªÉ l·∫ßn sau m·ªü l·∫°i lu√¥n s·∫°ch
    if (registerModalEl) {
        registerModalEl.addEventListener("show.bs.modal", resetRegisterUI);
        registerModalEl.addEventListener("hidden.bs.modal", resetRegisterUI);
    }

    // Submit ƒëƒÉng k√Ω
    btnSubmit.addEventListener("click", async function () {
        clearAllMessages();

        // Ch·∫∑n submit n·∫øu OTP ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c ho·∫∑c ƒë√£ h·∫øt h·∫°n
        if (!isOtpValid()) {
            const timerText = (timerLabel?.textContent || "").trim();
            if (timerText === "H·∫øt h·∫°n" || timerText === "0:00") {
                showMessageForInput(
                    inputOtp,
                    "M√£ OTP ƒë√£ h·∫øt h·∫°n, vui l√≤ng b·∫•m G·ª≠i OTP ƒë·ªÉ nh·∫≠n m√£ m·ªõi.",
                    "failure"
                );
            } else {
                showMessageForInput(
                    inputOtp,
                    "Vui l√≤ng x√°c th·ª±c OTP tr∆∞·ªõc khi ƒëƒÉng k√Ω.",
                    "failure"
                );
            }
            updateRegisterButton();
            return;
        }

        // Gom d·ªØ li·ªáu g·ª≠i sang server (JSON)
        const payload = {
            fullName: trim(inputFull.value),
            email: trim(inputEmail.value),
            password: trim(inputPass.value),
            confirmPassword: trim(inputConf.value),
            otp: trim(inputOtp.value),
        };

        // Kho√° n√∫t + b√°o tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
        const oldText = btnSubmit.innerHTML;
        btnSubmit.disabled = true;
        btnSubmit.innerHTML = "ƒêang t·∫°o t√†i kho·∫£n...";
        btnSubmit.style.opacity = "0.7";

        try {
            // G·ªçi API /auth/register (tr·∫£ JSON)
            const res = await fetch("/auth/register", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            let data = null;
            try {
                data = await res.json();
            } catch (_) {}

            if (data && data.ok) {
                // Th√†nh c√¥ng: ƒë·ªïi tr·∫°ng th√°i n√∫t r·ªìi chuy·ªÉn modal (·∫©n ƒëƒÉng k√Ω ‚Üí hi·ªán ƒëƒÉng nh·∫≠p)
                btnSubmit.classList.add("btn-success");
                btnSubmit.innerHTML = "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng";

                setTimeout(() => {
                    if (registerModalEl) {
                        const reg =
                            bootstrap.Modal.getInstance?.(registerModalEl) ||
                            new bootstrap.Modal(registerModalEl);

                        // Sau khi ·∫©n xong register ‚Üí m·ªõi show login (tr√°nh ch·ªìng modal)
                        const showLoginOnce = () => {
                            registerModalEl.removeEventListener(
                                "hidden.bs.modal",
                                showLoginOnce
                            );
                            if (loginModalEl) {
                                const login =
                                    bootstrap.Modal.getInstance?.(
                                        loginModalEl
                                    ) || new bootstrap.Modal(loginModalEl);
                                login.show();
                            }
                        };
                        registerModalEl.addEventListener(
                            "hidden.bs.modal",
                            showLoginOnce,
                            { once: true }
                        );
                        reg.hide();
                    }
                }, 1200);
            } else {
                // Th·∫•t b·∫°i: ƒë·ªãnh tuy·∫øn th√¥ng b√°o l·ªói v·ªÅ ƒë√∫ng field
                const msg =
                    data && data.message
                        ? data.message
                        : "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
                routeServerErrorToField(msg, {
                    otpExpired: !!(data && data.otpExpired),
                });
                btnSubmit.innerHTML = oldText;
                updateRegisterButton();
            }
        } catch (err) {
            // L·ªói m·∫°ng / kh√¥ng g·ªçi ƒë∆∞·ª£c server
            routeServerErrorToField(
                "Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i."
            );
            btnSubmit.innerHTML = oldText;
            updateRegisterButton();
        }
    });
});
